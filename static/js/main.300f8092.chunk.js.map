{"version":3,"sources":["gameHelpers.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/styles/StyledDisplay.js","components/Display.js","components/styles/StyledStartButton.js","components/StartButton.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js","img/bg.jpg"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","StyledTetrisWrapper","styled","div","bgImage","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","StyledDisplay","gameOver","Display","text","StyledStartButton","button","StartButton","callback","onClick","Tetris","dropTime","setDropTime","setGameOver","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","direction","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","score","setScore","rows","setRows","level","setLevel","linePoints","calcScore","useGameStatus","movePlayer","drop","console","log","move","keyCode","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.300f8092.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\r\nexport const STAGE_HEIGHT = 20;\r\n\r\nexport const createStage = () => Array.from(Array(STAGE_HEIGHT), () => \r\nnew Array(STAGE_WIDTH).fill([0, 'clear'])\r\n)\r\n\r\nexport const checkCollision = (player, stage, {x: moveX, y: moveY }) => {\r\n    for (let y = 0; y< player.tetromino.length; y += 1) {\r\n        for (let x = 0; x < player.tetromino[0].length; x += 1) {\r\n\r\n            // Check if we are on a tetromino cell\r\n            if (player.tetromino[y][x] !== 0) {\r\n\r\n                if (\r\n                // Inside the game area height\r\n                // We shouldn't go through the bottom\r\n                !stage[y + player.pos.y + moveY] || \r\n\r\n                //Inside the game area width\r\n                !stage[y + player.pos.y + moveY][x+ player.pos.x + moveX] ||\r\n\r\n                //Cell isn't set to clear\r\n                stage[y + player.pos.y + moveY][x+player.pos.x + moveX][1] !== 'clear'\r\n\r\n                ) {\r\n                    return true;\r\n                }\r\n\r\n            }\r\n        }\r\n    }\r\n\r\n}","import styled from 'styled-components';\r\n\r\nimport bgImage from '../../img/bg.jpg';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\nwidth: 100vw;\r\nheight: 100vh;\r\nbackground: url(${bgImage}) #000;\r\nbackground-size: cover;\r\noverflow: hidden;\r\n`\r\n\r\nexport const StyledTetris = styled.div`\r\ndisplay: flex;\r\nalign-items: flex-start;\r\npadding: 40px;\r\nmargin: 0 auto;\r\nmax-width: 900px;\r\n\r\naside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n}\r\n`","export const TETROMINOS = {\r\n    0: { shape: [[0]], color: '0,0,0'},\r\n    I: {\r\n        shape:[\r\n            [0, 'I', 0 , 0],\r\n            [0, 'I', 0 , 0],\r\n            [0, 'I', 0 , 0],\r\n            [0, 'I', 0 , 0]\r\n        ],\r\n         color:'80, 227, 230',\r\n    }, \r\n    J: {\r\n        shape:[\r\n            [0, 'J', 0 ],\r\n            [0, 'J', 0 ],\r\n            ['J', 'J', 0 ],\r\n\r\n        ],\r\n         color:'36, 95, 223',\r\n    },\r\n    L: {\r\n        shape:[\r\n            [0, 'L', 0 ],\r\n            [0, 'L', 0 ],\r\n            [0, 'L', 'L' ]\r\n        ],\r\n         color:'223, 173, 36',\r\n    },\r\n    O: {\r\n        shape:[\r\n            ['O', 'O' ],\r\n            ['O', 'O'],\r\n\r\n\r\n        ],\r\n         color:'223, 217, 36',\r\n    },\r\n    S: {\r\n        shape:[\r\n            [0, 'S', 'S' ],\r\n            ['S', 'S', 0 ],\r\n            [0, 0, 0 ]\r\n        ],\r\n         color:'48, 211, 56',\r\n    },\r\n    T: {\r\n        shape:[\r\n            [0, 0,0 ],\r\n            ['T', 'T', 'T'],\r\n            [0, 'T', 0 ]\r\n        ],\r\n         color:'132, 61, 198',\r\n    },\r\n    Z: {\r\n        shape:[\r\n            ['Z', 'Z', 0 ],\r\n            [0, 'Z', 'Z' ],\r\n            [0, 0, 0 ]\r\n        ],\r\n         color:'227, 78, 78',\r\n    }\r\n\r\n}\r\n\r\nexport const randomTetromino = () => {\r\n    const tetrominos = \"IJLOSTZ\";\r\n    const randTetromino = tetrominos[Math.floor(Math.random() * tetrominos.length)];\r\n\r\n    return TETROMINOS[randTetromino];\r\n}","import { useState, useEffect } from 'react';\r\n\r\nimport { createStage } from '../gameHelpers';\r\n\r\nexport const useStage = (player, resetPlayer) => {\r\n    const [stage, setStage] = useState(createStage());\r\n    const [rowsCleared, setRowsCleared] = useState(0);\r\n\r\n    useEffect(() => {\r\n\r\n        setRowsCleared(0)\r\n\r\n        const sweepRows = newStage => \r\n        newStage.reduce((ack, row) => {\r\n            if (row.findIndex(cell => cell[0] === 0) === -1) {\r\n                setRowsCleared(prev => prev +1);\r\n                ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\r\n                return ack;\r\n            }\r\n            ack.push(row);\r\n            return ack;\r\n        }, [])\r\n\r\n        const updateStage = prevStage => {\r\n            //Flush the stage\r\n            const newStage = prevStage.map(row =>\r\n                row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell))\r\n                );\r\n\r\n                //Draw tetronimo\r\n                player.tetromino.forEach((row, y) => {\r\n                    row.forEach((value, x) => {\r\n                        if (value !== 0) {\r\n                            newStage[y + player.pos.y][x + player.pos.x] = [\r\n                                value,\r\n                                `${player.collided ? 'merged' : 'clear'}`,\r\n\r\n                            ]\r\n                        }\r\n                    })\r\n                })\r\n\r\n                // Check if we collided or not\r\n                if (player.collided) {\r\n                    resetPlayer();\r\n                    return sweepRows(newStage);\r\n                }\r\n\r\n                return newStage;\r\n\r\n        };\r\n\r\n        setStage(prev => updateStage(prev));\r\n    }, [player, resetPlayer]);\r\n\r\n    return [stage, setStage, rowsCleared];\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\ndisplay: grid;\r\ngrid-template-rows: repeat(${props => props.height}, calc(25vw / ${props => props.width}));\r\ngrid-template-columns: repeat(${props => props.width}, 1fr);\r\ngrid-gap: 1px;\r\nborder: 2px solid #333;\r\nwidth: 100%;\r\nmax-width: 25vw;\r\nbackground: #111;\r\n`","import styled from 'styled-components';\r\n\r\nexport const StyledCell = styled.div`\r\nwidth: auto;\r\nbackground: rgba(${props => props.color}, 0.7);\r\nborder: ${props => (props.type===0) ? '0px solid' : '4px solid'};\r\nborder-bottom-color: rgba(${props => props.color}, 0.1);\r\nborder-right-color: rgba(${props => props.color}, 1);\r\nborder-top-color: rgba(${props => props.color}, 1);\r\nborder-left-color: rgba(${props => props.color}, 0.3);\r\n`","import React from 'react';\r\nimport { StyledCell } from './styles/StyledCell';\r\nimport { TETROMINOS } from '../tetrominos';\r\n\r\nconst Cell = ({ type }) => (\r\n    <StyledCell type={type} color={TETROMINOS[type].color}>\r\n    </StyledCell>\r\n)\r\n\r\nexport default React.memo(Cell);","import React from 'react';\r\n\r\nimport{ StyledStage } from './styles/StyledStage';\r\n\r\nimport Cell from './Cell';\r\n\r\nconst Stage = ({ stage }) => (\r\n    <StyledStage width={stage[0].length} height={stage.length}>\r\n        {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]}/>))}\r\n        </StyledStage>\r\n);\r\n\r\nexport default Stage;","import styled from 'styled-components';\r\n\r\nexport const StyledDisplay = styled.div`\r\nbox-sizing: border-box;\r\ndisplay: flex;\r\nalign-items: center;\r\nmargin: 0 0 20px 0;\r\npadding: 20px;\r\nborder: 4px solid #333;\r\nmin-height: 30px;\r\nwidth: 100%;\r\nborder-radius: 20px;\r\ncolor: ${props => (props.gameOver ? 'red' : '#999')};\r\nbackground: #000;\r\nfont-family: Pixel, Arial, Helvetica, sans-serif;\r\nfont-size: 0.8rem;\r\n`","import React from 'react';\r\nimport { StyledDisplay } from './styles/StyledDisplay';\r\n\r\n\r\nconst Display = ({ gameOver, text}) => (\r\n    <StyledDisplay gameOver={gameOver}>{text}</StyledDisplay>\r\n)\r\n\r\nexport default Display;","import styled from 'styled-components';\r\n\r\nexport const StyledStartButton = styled.button`\r\nbox-sizing: border-box;\r\nmargin: 0 0 20px 0;\r\npadding: 20px;\r\nmin-height: 30px;\r\nwidth: 100%;\r\nborder-radius: 20px;\r\nborder: none;\r\ncolor: white;\r\nbackground: #333;\r\nfont-family: Pixel, Arial, Helvetica;\r\nfont-size: 1rem;\r\noutline: none;\r\ncursor:pointer;\r\n\r\n`\r\n","import React from 'react';\r\nimport { StyledStartButton } from './styles/StyledStartButton'\r\n\r\nconst StartButton = ({ callback}) => (\r\n    <StyledStartButton onClick={callback}>\r\n        Start Game\r\n    </StyledStartButton>\r\n)\r\n\r\nexport default StartButton;","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers'; \r\n\r\n//Styled components\r\nimport {StyledTetris, StyledTetrisWrapper} from './styles/StyledTetris';\r\n\r\n//Custom hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n//Components\r\nimport Stage from './Stage';\r\nimport Display from './Display';\r\nimport StartButton from './StartButton';\r\n\r\nconst Tetris = () => {\r\n\r\n    const [dropTime, setDropTime] = useState(null);\r\n    const [gameOver, setGameOver] = useState(false);\r\n\r\n    const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n    const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n    const [score, setScore, rows, setRows, level, setLevel] = useGameStatus(rowsCleared);\r\n\r\n\r\n    const movePlayer = dir => {\r\n        if (!checkCollision(player, stage, {x: dir, y: 0})) {\r\n            updatePlayerPos({x:dir, y: 0});\r\n        }\r\n    }\r\n\r\n    const startGame = () => {\r\n        // Reset\r\n        setStage(createStage());\r\n        setDropTime(1000);\r\n        resetPlayer();\r\n        setGameOver(false);\r\n        setScore(0);\r\n        setRows(0);\r\n        setLevel(0);\r\n    }\r\n\r\n    const drop = () => {\r\n        // Increase level when player has cleared 5 rows\r\n        if (rows > (level+1) * 5) {\r\n            setLevel(prev => prev + 1);\r\n            //Increase speed\r\n            setDropTime(1000 / (level+1) + 200);\r\n        }\r\n        if (!checkCollision(player, stage, { x: 0, y: 1})) {\r\n            updatePlayerPos({x:0, y:1, collided: false});\r\n        } else {\r\n            //Game Over\r\n            if (player.pos.y < 1) {\r\n                console.log(\"GAME OVER!!\")\r\n                setGameOver(true);\r\n                setDropTime(null);\r\n            }\r\n            updatePlayerPos({x:0, y:0, collided: true});\r\n        }\r\n    }\r\n\r\n    const keyUp = ({ keyCode}) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 40 || keyCode=== 83) {\r\n                setDropTime(1000 / (level+1) + 200);\r\n            }\r\n        }\r\n    }\r\n\r\n    const dropPlayer = () => {\r\n        setDropTime(null);\r\n        drop();\r\n    }\r\n\r\n    const move = ({ keyCode }) => {\r\n        if (!gameOver) {\r\n            if (keyCode === 37 || keyCode === 65) {\r\n                movePlayer(-1);\r\n            } else if (keyCode === 39 || keyCode === 68) {\r\n                movePlayer(1);\r\n            } else if (keyCode === 40 || keyCode === 83) {\r\n                dropPlayer();\r\n            } else if (keyCode=== 38 || keyCode === 87) {\r\n                playerRotate(stage, 1);\r\n            }\r\n        }\r\n    }\r\n\r\n    useInterval(() => {\r\n        drop();\r\n    }, dropTime)\r\n\r\n\r\n    return (\r\n        <StyledTetrisWrapper role=\"button\" tabIndex=\"0\" onKeyDown={e => move(e)} onKeyUp={keyUp}>\r\n            <StyledTetris>\r\n            <Stage stage={stage}/>\r\n            <aside>\r\n                {gameOver ? (\r\n                    <Display gameOver={gameOver} text=\"Game Over\"/>\r\n                ) : (\r\n                <div>\r\n                <Display text={`Score: ${score}`}/>\r\n                <Display text={`Rows: ${rows}`}/>\r\n                <Display text={`Level: ${level}`}/>\r\n                </div>\r\n                )}\r\n                <StartButton callback={startGame} />\r\n            </aside>\r\n            </StyledTetris>\r\n        </StyledTetrisWrapper>\r\n    )\r\n}\r\n\r\nexport default Tetris;","import { useState, useCallback } from 'react';\r\n\r\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\r\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\r\n\r\nexport const usePlayer = () => {\r\n    const [player, setPlayer] = useState({\r\n        pos: { x: 0, y:0},\r\n        tetromino: TETROMINOS[0].shape,\r\n        collided: false\r\n    });\r\n\r\n    const rotate = (matrix, dir) => {\r\n        // Make the rows columns \r\n        const rotatedTetro = matrix.map((_, index) => \r\n        matrix.map(col => col[index])\r\n        );\r\n        //Reverse each row to get a rotated matrix\r\n        if (dir > 0) return rotatedTetro.map(row => row.reverse());\r\n        return rotatedTetro.reverse();\r\n\r\n    }\r\n\r\n    const playerRotate =(stage, direction) => {\r\n        const clonedPlayer = JSON.parse(JSON.stringify(player));\r\n        clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, direction);\r\n\r\n        const pos = clonedPlayer.pos.x;\r\n        let offset = 1;\r\n        while(checkCollision(clonedPlayer, stage, {x:0, y:0})) {\r\n            clonedPlayer.pos.x += offset;\r\n            offset = -(offset + (offset > 0 ? 1 : -1));\r\n            if (offset > clonedPlayer.tetromino[0].length) {\r\n                rotate(clonedPlayer.tetromino, -direction);\r\n                clonedPlayer.pos.x = pos;\r\n                return;\r\n            }\r\n        }\r\n\r\n        setPlayer(clonedPlayer)\r\n\r\n\r\n\r\n    }\r\n\r\n    const updatePlayerPos = ({x, y, collided}) => {\r\n        setPlayer(prev => ({\r\n            ...prev,\r\n            pos: {x: (prev.pos.x += x), y: (prev.pos.y += y)},\r\n            collided,\r\n        }))\r\n    }\r\n\r\n    const resetPlayer = useCallback(() => {\r\n        setPlayer({\r\n            pos: {x: STAGE_WIDTH / 2- 2, y: 0},\r\n            tetromino: randomTetromino().shape,\r\n            collided: false\r\n        })\r\n    }, [])\r\n    \r\n    return [player, updatePlayerPos, resetPlayer, playerRotate];\r\n}","import { useState, useEffect, useCallback} from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n\r\n    const linePoints = [40, 100 , 300 , 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // Do we have score?\r\n        if (rowsCleared > 0) {\r\n            //This is how original Tetris scoring was calculated\r\n            setScore(prev => prev + linePoints[rowsCleared-1] * (level+1));\r\n            setRows(prev => prev + rowsCleared);\r\n\r\n        }\r\n    }, [level, linePoints, rowsCleared])\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score])\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel];\r\n\r\n};","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\nimport Tetris from './components/Tetris';\n\nconst App = () => (\n  <div className=\"App\">\n    <Tetris />\n  </div>\n);\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/bg.263c4490.jpg\";"],"sourceRoot":""}